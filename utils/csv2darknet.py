import sys
import glob
import os
import numpy as np
import subprocess

def main(NAME, IMAGES_DIR, TRAIN_CSV, DARKNET_DIR):
	# Create output directory, and label+backup sub-directory
	this_path = os.path.dirname(os.path.realpath(__file__))
	directory = NAME+'/'
	labels_directory = IMAGES_DIR.split('images')[0]+'labels'+IMAGES_DIR.split('images')[1]
	backup_directory = directory+'backup/'+NAME
	if not os.path.exists(labels_directory):
		os.makedirs(labels_directory)
	if not os.path.exists(backup_directory):
	        os.makedirs(backup_directory)
	# Parse through the CSV
	csv_file = open(TRAIN_CSV)
	dataline = csv_file.readline() # Discard header
	last_filepath = ''
	while 1:
		# Read data
		dataline = csv_file.readline()
		if len(dataline)==0:
			break
		data = dataline.split(',')
		file_path = data[0]
		filename = file_path.split('/')[-1]
		if file_path != last_filepath:
			if last_filepath!='':
				txt_file.close()
			txt_file = open(labels_directory+'/'+filename.split('.')[0]+'.txt','w')
		class_id = data[3].split('-')[-1]
		width = float(data[1])
		xmin = float(data[4])
		xmax = float(data[6])
		height = float(data[2])
		ymin = float(data[5])
		ymax = float(data[7])
		# Darknet conversions
		xcent = np.mean([xmin,xmax])/width
		ycent = np.mean([ymin,ymax])/height
		width_percent = (xmax-xmin)/width
		height_percent = (ymax-ymin)/height
		new_data = [class_id,xcent,ycent,width_percent,height_percent]
		new_dataline = " ".join(str(x) for x in new_data)
		txt_file.write(new_dataline+'\n')
		last_filepath = file_path
	txt_file.close()
	csv_file.close()

	names_file = open(directory+NAME+'.names','w')
	# Insert each class name in name file, IN CORRECT ORDER
	num_classes = 0

	while 1:
		for vid_path in glob.glob('data/videos/'+str(num_classes)+'-*'):
			if len(vid_path.split('-')) > 2:
				continue
			names_file.write(vid_path.split('-')[-1].split('.')[0]+'\n')
		num_classes+=1
		if len(glob.glob('data/videos/'+str(num_classes)+'-*'))==0:
			break

	data_file = open(directory+NAME+'.data','w')
	data_file.write('classes = '+str(num_classes)+'\n')
	data_file.write('names = '+this_path+'/'+directory+NAME+'.names\n')
	data_file.write('backup = '+this_path+'/'+backup_directory+'\n')
	data_file.write('train = '+this_path+'/'+directory+'train.txt\n')
	data_file.close()

	train_file = open(directory+'train.txt','w')
	for filename in glob.glob(IMAGES_DIR+'*.jpg'):
		train_file.write(this_path+'/'+filename+'\n')
	train_file.close()

	orig_cfg_file = open('data/yolov2-template.cfg')
	cfg_file = open(directory+NAME+'.cfg','w')
	for x in range(236):
		cfg_file.write(orig_cfg_file.readline())
	orig_cfg_file.readline()
	cfg_file.write('filters='+str((num_classes+5)*5)+'\n')
	for x in range(6):
	        cfg_file.write(orig_cfg_file.readline())
	orig_cfg_file.readline()
	cfg_file.write('classes='+str(num_classes)+'\n')
	for x in range(14):
	        cfg_file.write(orig_cfg_file.readline())

	# Create symlink
	subprocess.call(['ln','-s',this_path+'/'+directory,DARKNET_DIR+'/'+NAME])

	# ./darknet detector train river3/river3.data river3/river3.cfg darknet19_448.conv.23
	print "In your darknet directory, with darknet19_448.conv.23 at the root, run:"
	print "./darknet detector train "+NAME+"/"+NAME+".data "+NAME+"/"+NAME+".cfg darknet19_448.conv.23"

if __name__ == "__main__":
	if len(sys.argv) < 5:
		print "Must provide args."
		print "Arg1: Desired name of model"
		print "Arg2: Path to directory containing images"
		print "Arg3: Path to CSV generated by script"
		print "Arg4: Path to darknet directory"
		sys.exit()

	NAME = sys.argv[1]
	IMAGES_DIR = sys.argv[2]
	TRAIN_CSV = sys.argv[3]
	DARKNET_DIR = sys.argv[4]
	main(NAME,IMAGES_DIR,TRAIN_CSV,DARKNET_DIR)